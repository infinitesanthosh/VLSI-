// ðŸ“˜ Day 1 â€“ Verilog Basics (Quick Revision)

// ðŸ”¹ HDL Levels
// - Gate Level â†’ basic gates (AND, OR, NOT...)
// - Dataflow  â†’ use "assign" (equations, expressions)
// - Behavioral â†’ use "always" (if/case, sequential logic)
// Mnemonic: "G-D-B = Gates â†’ Data â†’ Behavior"

// ðŸ”¹ Important Keywords
// module ... endmodule â†’ design block
// input / output â†’ ports
// wire â†’ for continuous assign
// reg  â†’ for always blocks
// Mnemonic: "Wire is live, Reg remembers"

// ðŸ”¹ Operators
// & | ^ ~   â†’ bitwise AND, OR, XOR, NOT
// && || !  â†’ logical AND, OR, NOT
// << >>    â†’ shifts (zero fill)
// Mnemonic: "1 symbol = bitwise, 2 symbols = logical"

// ðŸ”¹ Equality
// == / !=  â†’ may give X if unknown
// === / !== â†’ strict, includes X & Z
// Mnemonic: "2 equals can be X, 3 equals is exact"

// ðŸ”¹ Adders/Subtractors
// Half Adder: sum=a^b, cout=a&b
// Full Adder: sum=a^b^cin, cout=(a&b)|(b&cin)|(a&cin)
// Half Sub: diff=a^b, borrow=~a & b
// Full Sub: diff=a^b^bin, borrow=(~a&b)|(bin&~a)|(bin&b)
// Mnemonic: "Adder uses XOR+AND/OR, Subtractor uses XOR+borrow"
